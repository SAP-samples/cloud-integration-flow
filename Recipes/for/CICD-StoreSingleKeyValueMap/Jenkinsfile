pipeline {
  agent any

  //Configure the following environment variables before executing the Jenkins Job
  environment {
    KeyValueMapName = "Sample KVM"
    APIPortalHost = "${env.API_HOST}"
    AuthType = "OAuth" //Values can be Basic/OAuth
    APIPortalBasicAuth = "${env.API_BasicAuth_CRED}"
    APIPortalOAuthHost = "${env.API_OAUTH_HOST}"
    APIPortalOAuthCredentials = "${env.API_OAUTH_CRED}"
    GITRepositoryURL = "${env.GIT_REPOSITORY_URL}"
    GITCredentials = "${env.GIT_CRED}"
    GITBranch = "${env.GIT_BRANCH_NAME}"
    GITFolder = "IntegrationContent/API"
    GITComment = "Key Value Map update from CICD pipeline"
  }

  stages {

    stage('Clone Git Repository to Workspace') {
      steps {
        script {
          //Delete workspace before cloning from Git
          println '**** Delete workspace before cloning from Git ****';
          deleteDir();

          //Checkout from Git
          checkout([
            $class: 'GitSCM',
            branches: [
              [name: env.GITBranch]
            ],
            doGenerateSubmoduleConfigurations: false,
            extensions: [
              [$class: 'RelativeTargetDirectory', relativeTargetDir: "."],
              [$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [
                [$class: 'SparseCheckoutPath', path: "${env.GITFolder}"]
              ]]
            ],
            submoduleCfg: [],
            userRemoteConfigs: [
              [
                credentialsId: env.GITCredentials,
                url: 'https://' + env.GITRepositoryURL
              ]
            ]
          ])
        }
      }
    }

    stage('Generate API Portal OAuth Bearer token') {
      steps {
        script {
          if (env.AuthType.toLowerCase() == "oauth") {
            //Generate API Portal OAuth Bearer token
            println '**** Generate API Portal OAuth Bearer token ****';
            try {
              def getTokenResp = httpRequest acceptType: 'APPLICATION_JSON',
                authentication: env.APIPortalOAuthCredentials,
                contentType: 'APPLICATION_JSON',
                httpMode: 'POST',
                ignoreSslErrors: true,
                responseHandle: 'LEAVE_OPEN',
                timeout: 30,
                url: 'https://' + env.APIPortalOAuthHost + '/oauth/token?grant_type=client_credentials'
              def jsonObj = readJSON text: getTokenResp.content
              def token_s1 = 'bearer' + ' ' + jsonObj.access_token
              env.token = token_s1
              getTokenResp.close();
            } catch (Exception e) {
              error("Bearer token generation failed:\n${e}")
            }
          }
        }
      }
    }

    stage('Get Key Value Map') {
      steps {
        script {
          //Get Key Value Map'
          println '**** Get Key Value Map ****';
          def KVM = "";
          //Handled space in key value map artifact name
          if (env.KeyValueMapName.contains(' ')) {
            KeyValueMapName = env.KeyValueMapName.replace(' ', '%20')
          }
          try {
            if (env.AuthType.toLowerCase() == "basic") {
              KVM = httpRequest acceptType: 'APPLICATION_JSON',
                authentication: env.APIPortalBasicAuth,
                contentType: 'APPLICATION_JSON',
                httpMode: 'GET',
                ignoreSslErrors: true,
                responseHandle: 'LEAVE_OPEN',
                timeout: 30,
                url: 'https://' + env.APIPortalHost + '/apiportal/api/1.0/Management.svc/KeyMapEntries(' + '\'' + KeyValueMapName + '\'' + ')'
            } else if (env.AuthType.toLowerCase() == "oauth") {
              KVM = httpRequest acceptType: 'APPLICATION_JSON',
                httpMode: 'GET',
                ignoreSslErrors: true,
                customHeaders: [
                  [maskValue: true, name: 'Authorization', value: env.token]
                ],
                timeout: 30,
                url: 'https://' + env.APIPortalHost + '/apiportal/api/1.0/Management.svc/KeyMapEntries(' + '\'' + KeyValueMapName + '\'' + ')'
            }
            def KVMMetadata = readJSON text: KVM.content
            env.encryptFlag = KVMMetadata.d.encrypted
            KVM.close();
          } catch (Exception e) {
              error("Key Value Map GET call failed:\n${e}")
          }
        }
      }
    }

    stage('Get Key Value Map Entries') {
      steps {
        script {
          //Get Key Value Map Entries'
          println '**** Get Key Value Map Entries ****';
          def KVMValues = "";
          if (env.AuthType.toLowerCase() == "basic") {
            KVMValues = httpRequest acceptType: 'APPLICATION_JSON',
              authentication: env.APIPortalBasicAuth,
              contentType: 'APPLICATION_JSON',
              httpMode: 'GET',
              ignoreSslErrors: true,
              responseHandle: 'LEAVE_OPEN',
              timeout: 30,
              url: 'https://' + env.APIPortalHost + '/apiportal/api/1.0/Management.svc/KeyMapEntries(' + '\'' + KeyValueMapName + '\'' + ')/keyMapEntryValues'
          } else if (env.AuthType.toLowerCase() == "oauth") {
            KVMValues = httpRequest acceptType: 'APPLICATION_JSON',            
              httpMode: 'GET',
              ignoreSslErrors: true,
              customHeaders: [
                [maskValue: true, name: 'Authorization', value: env.token]
                ],
              timeout: 30,
              url: 'https://' + env.APIPortalHost + '/apiportal/api/1.0/Management.svc/KeyMapEntries(' + '\'' + KeyValueMapName + '\'' + ')/keyMapEntryValues'
          }
          def jsonKVM = readJSON text: KVMValues.content
          KVMValues.close();
          
          //Write Key Value Map content to a CSV file
          println '**** Write Key Value Map content to a CSV file ****';
          def fullList = [
            ['key','value','isEncrypted']
          ]
          
          for (def i = 0; i < jsonKVM.d.results.size(); i++) {
            def name = jsonKVM.d.results[i].name
            def value = jsonKVM.d.results[i].value

            def records = [name,value,env.encryptFlag]
            fullList.add(records)
          }
          
          writeCSV file: env.KeyValueMapName + '.csv',
            records: fullList

          fileOperations([fileCopyOperation(excludes: '', includes: env.KeyValueMapName + '.csv', targetLocation: env.GITFolder)])
        }
      }
    }
          
    stage('Push Downloaded Key Value Map as CSV to Git') {
      steps {
        script {
          //Push Key Value Map as CSV File to Git
          println '**** Push Key Value Map as CSV File to Git ****';
          dir(env.GITFolder) {
            sh 'git add .'
          }

          withCredentials([
            [$class: 'UsernamePasswordMultiBinding', credentialsId: env.GITCredentials, usernameVariable: 'GIT_AUTHOR_NAME', passwordVariable: 'GIT_PASSWORD']
          ]) {
            sh 'git diff-index --quiet HEAD || git commit -am ' + '\'' + env.GITComment + '\''
            sh('git push https://${GIT_AUTHOR_NAME}:${GIT_PASSWORD}@' + env.GITRepositoryURL + ' HEAD:' + env.GITBranch)
          }

          //Delete workspace
          deleteDir()
        }
      }
    }
  }
}